{
    "swagger": "2.0",
    "info": {
        "description": "This is a webtemplate API that contains project dir structure, JWT auth, basic user entitites and can be further expanded.",
        "title": "WebTemplate API",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:3000",
    "basePath": "/api/v1",
    "paths": {
        "/user/login": {
            "post": {
                "description": "Login to existing user account using his email, username and password. Returns his ID, email, username, verifiedEmail boolean variable and role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login to existing user account.",
                "parameters": [
                    {
                        "description": "User login body object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/refresh": {
            "post": {
                "description": "Get a new access token using a valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Refresh the access token",
                "parameters": [
                    {
                        "description": "Access token object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Register a new user using his email, username and password. Returns his ID, email, username, verifiedEmail boolean variable and role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration body object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegister"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/verify": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Verify a user account with a code, sent to user's email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Verify user account",
                "parameters": [
                    {
                        "description": "User's email code",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AuthTokens": {
            "type": "object",
            "properties": {
                "access": {
                    "description": "Access token",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.Token"
                        }
                    ]
                },
                "refresh": {
                    "description": "Refresh token",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.Token"
                        }
                    ]
                }
            }
        },
        "dto.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP error code",
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "description": "Error message",
                    "type": "string",
                    "example": "you are retard"
                }
            }
        },
        "dto.HTTPStatus": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.Token": {
            "type": "object",
            "properties": {
                "expires": {
                    "description": "Token expiration time in ISO 8601 format",
                    "type": "string",
                    "example": "2024-12-08T10:00:12.961568771Z"
                },
                "token": {
                    "description": "Token string itself",
                    "type": "string",
                    "example": "somelong.token.string"
                }
            }
        },
        "dto.UserCode": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "dto.UserLogin": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email, must be valid email address",
                    "type": "string",
                    "example": "example@gmail.com"
                },
                "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "Password1234"
                }
            }
        },
        "dto.UserRegister": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Required, email must be valid",
                    "type": "string",
                    "example": "example@gmail.com"
                },
                "password": {
                    "description": "Required, password must meet certain requirements: must has upper case letters, lower case letters and digits",
                    "type": "string",
                    "example": "Password1234"
                },
                "username": {
                    "description": "Required, user's username",
                    "type": "string",
                    "example": "linuxflight"
                }
            }
        },
        "dto.UserRegisterResponse": {
            "type": "object",
            "properties": {
                "tokens": {
                    "description": "Two JWT tokens: Access token and Refresh token",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.AuthTokens"
                        }
                    ]
                },
                "user": {
                    "description": "User object",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserReturn"
                        }
                    ]
                }
            }
        },
        "dto.UserReturn": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "example@gmail.com"
                },
                "id": {
                    "description": "User ID",
                    "type": "string",
                    "example": "123"
                },
                "role": {
                    "description": "User's role (e.g. \"Client\", \"Manager\" etc)",
                    "type": "string",
                    "example": "manager"
                },
                "username": {
                    "description": "User's username",
                    "type": "string",
                    "example": "linuxflight"
                },
                "verified_email": {
                    "description": "Boll variable showing, whether user's email is verified or not",
                    "type": "boolean",
                    "example": true
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "\"Type 'Bearer TOKEN' to correctly set the API Key\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}