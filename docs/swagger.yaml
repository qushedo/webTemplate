basePath: /api/v1
definitions:
  dto.AuthTokens:
    properties:
      access:
        allOf:
        - $ref: '#/definitions/dto.Token'
        description: Access token
      refresh:
        allOf:
        - $ref: '#/definitions/dto.Token'
        description: Refresh token
    type: object
  dto.HTTPError:
    properties:
      code:
        description: HTTP error code
        example: 400
        type: integer
      message:
        description: Error message
        example: you are retard
        type: string
    type: object
  dto.HTTPStatus:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  dto.Token:
    properties:
      expires:
        description: Token expiration time in ISO 8601 format
        example: "2024-12-08T10:00:12.961568771Z"
        type: string
      token:
        description: Token string itself
        example: somelong.token.string
        type: string
    type: object
  dto.UserCode:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  dto.UserLogin:
    properties:
      email:
        description: User's email, must be valid email address
        example: example@gmail.com
        type: string
      password:
        description: User's password
        example: Password1234
        type: string
    required:
    - email
    - password
    type: object
  dto.UserRegister:
    properties:
      email:
        description: Required, email must be valid
        example: example@gmail.com
        type: string
      password:
        description: 'Required, password must meet certain requirements: must has
          upper case letters, lower case letters and digits'
        example: Password1234
        type: string
      username:
        description: Required, user's username
        example: linuxflight
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.UserRegisterResponse:
    properties:
      tokens:
        allOf:
        - $ref: '#/definitions/dto.AuthTokens'
        description: 'Two JWT tokens: Access token and Refresh token'
      user:
        allOf:
        - $ref: '#/definitions/dto.UserReturn'
        description: User object
    type: object
  dto.UserReturn:
    properties:
      email:
        description: User's email
        example: example@gmail.com
        type: string
      id:
        description: User ID
        example: "123"
        type: string
      role:
        description: User's role (e.g. "Client", "Manager" etc)
        example: manager
        type: string
      username:
        description: User's username
        example: linuxflight
        type: string
      verified_email:
        description: Boll variable showing, whether user's email is verified or not
        example: true
        type: boolean
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a webtemplate API that contains project dir structure, JWT
    auth, basic user entitites and can be further expanded.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: WebTemplate API
  version: "1.0"
paths:
  /user/login:
    post:
      consumes:
      - application/json
      description: Login to existing user account using his email, username and password.
        Returns his ID, email, username, verifiedEmail boolean variable and role
      parameters:
      - description: User login body object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Login to existing user account.
      tags:
      - user
  /user/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a valid refresh token
      parameters:
      - description: Access token object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.Token'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Refresh the access token
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Register a new user using his email, username and password. Returns
        his ID, email, username, verifiedEmail boolean variable and role
      parameters:
      - description: User registration body object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Register a new user
      tags:
      - user
  /user/verify:
    post:
      consumes:
      - application/json
      description: Verify a user account with a code, sent to user's email
      parameters:
      - description: User's email code
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UserCode'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.HTTPStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      security:
      - Bearer: []
      summary: Verify user account
      tags:
      - user
securityDefinitions:
  Bearer:
    description: '"Type ''Bearer TOKEN'' to correctly set the API Key"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
